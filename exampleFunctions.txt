#fibonnacci 
#r3,4,5, are all fibonnaccinumbers at all times
38600000 #li r3, 0
38800001 #li r4, 1
#loop
7CA32214 #add r5, r3, r4
7C832378 #mr r3, r4
7CA42B78 #mr r4, r5
4BFFFFF4 #b loop


#factorial 
#set r3 to what you want to be factorial'ed, output will be in r3
7C641B78 #mr r4, r3 #copys r3 into r4
3863FFFF #subi r3, r3, 1 #subtract 1
2C030001 #cmpwi r3, 1
4081000C #ble 0xC
7C8321D6 #mullw r4, r3, r4
4BFFFFF0 #b -0x10
7C832378 #mr r3, r4

#load and store example
#loads "first arg" and "second arg" from memory, adds them and then stores in "return location"
3BE00018 #li r31, 0x18
807F0000 #lwz r3, 0x0(r31)
809F0004 #lwz r4, 0x4(r31)
7C632214 #add r3, r3, r4
907F0008 #stw r3, 0x8(r31)
00000000
0000000C #first arg = 12
00000010 #second arg = 16
00000000 #return location = result = 28 = 0x1C


Below is a test function I wrote where i performed multiple function calls using bl, and used appropriate steps to store the values to the stack so that function calls are performed as intended.
This is not shown in the readme, but the chunk of hex below it is the input to the program and does correctly make the final result of r3 = 3 with stack correctly returned to its initial value.

function call attempt
    bl function
    nop

function:
    subi r1, r1, 0x30
    mflr r0
    stw r0, 0x4(r1)
    bl one
    stw r3, 0x10(r1)
    bl two
    lwz r4, 0x10(r1)
    add r3, r3, r4
    lwz r0, 0x4(r1)
    mtlr r0
    addi r1, r1, 0x30
    blr
one:
    li r3, 1
    blr 
two:
    li r3, 2
    blr

48000009 00000000
3821FFD0 7C0802A6
90010004 48000025
90610010 48000025
80810010 7C632214
80010004 7C0803A6
38210030 4E800020
38600001 4E800020
38600002 4E800020